import streamlit as st
import boto3
import json
import pandas as pd
import requests

session = boto3.Session(profile_name="iaedn")
client = session.client('bedrock-runtime', region_name='us-west-2')



# =========================
# Fun√ß√£o para chamada ao AWS Bedrock
# =========================
def call_bedrock_model(messages):
    payload = {
        "messages": [{"role": msg["role"], "content": msg["content"]} for msg in messages],
        "max_tokens": 200000,
        "anthropic_version": "bedrock-2023-05-31",
        "temperature": 1.0,
        "top_p": 0.95,
        "stop_sequences": []
    }

    try:
        response = client.invoke_model_with_response_stream(
            modelId="anthropic.claude-v2",
            body=json.dumps(payload).encode("utf-8"),
            contentType="application/json",
            accept="application/json"
        )
        output = []
        stream = response.get("body")
        if stream:
            for event in stream:
                chunk = event.get("chunk")
                if chunk:
                    chunk_data = json.loads(chunk.get("bytes").decode())
                    if chunk_data.get("type") == "content_block_delta":
                        delta = chunk_data.get("delta", {})
                        if delta.get("type") == "text_delta":
                            output.append(delta.get("text", ""))
        return "".join(output)
    except Exception as e:
        return f"Erro ao chamar o modelo: {str(e)}"

# =========================
# Interface do Chat
# =========================

# URL do logo hospedado online
logo_url = "https://i.imgur.com/sxYtWkc.jpeg"

# Exibindo o logo a partir da URL
# HTML + CSS para centralizar o logo
st.markdown(
    f"""
    <style>
        .centered-logo {{
            display: flex;
            justify-content: center;
        }}
    </style>
    <div class="centered-logo">
        <img src="{logo_url}" width="200">
    </div>
    """,
    unsafe_allow_html=True
)


# T√≠tulo do app
st.title("Acess√≠vel+ - Plataforma de Acessibilidade")

# Descri√ß√£o
st.markdown("""
Acess√≠vel+ √© uma plataforma dedicada a fornecer informa√ß√µes precisas sobre a acessibilidade de locais e rotas para pessoas com defici√™ncia.
Aqui, voc√™ pode consultar informa√ß√µes sobre rampas, elevadores, transporte p√∫blico acess√≠vel, e muito mais!
""")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
    context = """ Bem-vindo! Voc√™ est√° interagindo com o assistente da Acess√≠vel+, que √© uma plataforma criada para pessoas com defici√™ncia (PcD),
      oferecendo uma forma pr√°tica e eficiente de: 
      Avaliar, localizar e compartilhar informa√ß√µes sobre locais acess√≠veis.
    Consultar rotas adaptadas e acessar dados atualizados sobre acessibilidade em tempo real.
    Nosso objetivo √© facilitar o acesso de pessoas com mobilidade reduzida ou necessidades espec√≠ficas, promovendo uma experi√™ncia mais inclusiva e aut√¥noma para todos.

*Prompt*:

Voc√™ √© o Acess√≠vel+, especializado em acessibilidade para pessoas com mobilidade reduzida e com defici√™ncia (PcD). Sua miss√£o √© fornecer informa√ß√µes detalhadas e confi√°veis sobre a acessibilidade de locais e rotas, sempre com uma comunica√ß√£o clara, amig√°vel e acolhedora. Use uma linguagem simples, emp√°tica e, sempre que apropriado, inclua emojis para tornar a intera√ß√£o mais pr√≥xima e acess√≠vel.

Seu papel √© analisar as informa√ß√µes sobre diferentes locais e destacar as melhores op√ß√µes de acordo com os seguintes crit√©rios de acessibilidade:

Rampas de acesso
Elevadores
Banheiros adaptados
Estacionamento reservado
Transporte p√∫blico acess√≠vel
Avisos sonoros para pedestres
Acessibilidade para pessoas autistas
Apoio √† comunica√ß√£o n√£o verbal
Sinaliza√ß√£o t√°til (para deficientes visuais)
Pisos t√°teis (para facilitar a locomo√ß√£o de deficientes visuais)
Espa√ßos com largura adequada para cadeirantes e carrinhos de beb√™
Informa√ß√µes em braille
Tecnologia assistiva (como sistemas de leitura de tela)
Acessibilidade em √°reas de recrea√ß√£o (para crian√ßas com defici√™ncia)
Disponibilidade de auxiliares de apoio (como cuidadores ou int√©rpretes de Libras)
Ilumina√ß√£o adequada para deficientes visuais
Zonas de descanso e espera acess√≠veis
√Åreas que aceitam c√£es-guia

Responda usando emojis e linguagem informal
Importante: Mantenha o foco em fornecer informa√ß√µes relevantes sobre acessibilidade. Evite desviar para temas n√£o relacionados ou dar informa√ß√µes incorretas. Seu objetivo √© ser uma fonte confi√°vel e √∫til para quem busca uma experi√™ncia mais inclusiva e acess√≠vel. """

    st.session_state.chat_history.append({"role": "user", "content": context, "hidden": True})

if 'show_chat_history' not in st.session_state: st.session_state['show_chat_history'] = True

#user_input = st.text_area("Digite sua mensagem ou personalize o prompt:", key="user_input")

# Campo de perguntas com placeholder
user_input = st.text_input("O que voc√™ gostaria de saber sobre acessibilidade?", 
                           placeholder="Exemplo: Onde tem rampas de acesso?")
# Instru√ß√µes para o usu√°rio
st.markdown("""
    **D√∫vidas comuns que voc√™ pode perguntar:**
    - Onde tem rampas de acesso?
    - Quais locais t√™m banheiros adaptados?
    - Qual transporte p√∫blico √© acess√≠vel na minha regi√£o?
    - H√° alguma √°rea com sinaliza√ß√£o t√°til?
""")


def add_message_to_history(role, content, hidden=False):
    if not hidden:
        if not st.session_state.chat_history or st.session_state.chat_history[-1]["role"] != role:
            st.session_state.chat_history.append({"role": role, "content": content})
    else:
        st.session_state.chat_history.append({"role": role, "content": content, "hidden": True})




if st.button("Enviar"):
    if user_input.strip():
        add_message_to_history("user", user_input)

        with st.spinner("Buscando resposta..."):
            model_response = call_bedrock_model(
                [msg for msg in st.session_state.chat_history]
            )

            add_message_to_history("assistant", model_response)

st.subheader("Hist√≥rico do Chat")
for message in st.session_state.chat_history:
    if not message.get("hidden", False):
        if message["role"] == "user":
            st.write(f"**Usu√°rio:** {message['content']}")
        elif message["role"] == "assistant":
            st.write(f"**Modelo:** {message['content']}")

# Rodap√© com informa√ß√µes de contato (em vermelho)
st.markdown("""
---
#### Acess√≠vel+ | Todos os direitos reservados.
üí¨ Para mais informa√ß√µes, entre em contato conosco atrav√©s do email: contato@acessivelplus.com
""")
